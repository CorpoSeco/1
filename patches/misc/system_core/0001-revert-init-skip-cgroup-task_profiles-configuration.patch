From 2dcbffef1874d558435fc24408e67495033c08b3 Mon Sep 17 00:00:00 2001
From: TheAtt1la <alittauwu@gmail.com>
Date: Sun, 29 Jan 2023 00:52:30 +0000
Subject: [PATCH] revert init: skip cgroup/task_profiles configuration if cgroups are disabled

---
 init/init.cpp                                 |  4 ---
 init/service.cpp                              | 27 +++++++------------
 init/service_utils.cpp                        |  9 -------
 .../include/processgroup/processgroup.h       |  1 -
 libprocessgroup/processgroup.cpp              |  5 ----
 5 files changed, 9 insertions(+), 37 deletions(-)

diff --git a/init/init.cpp b/init/init.cpp
index b2c8dc749..06769ae9f 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -508,10 +508,6 @@ static Result<void> wait_for_coldboot_done_action(const BuiltinArguments& args)
 }
 
 static Result<void> SetupCgroupsAction(const BuiltinArguments&) {
-    if (!CgroupsAvailable()) {
-        LOG(INFO) << "Cgroups support in kernel is not enabled";
-        return {};
-    }
     // Have to create <CGROUPS_RC_DIR> using make_dir function
     // for appropriate sepolicy to be set for it
     make_dir(android::base::Dirname(CGROUPS_RC_PATH), 0711);
diff --git a/init/service.cpp b/init/service.cpp
index 1e8465129..283cd2deb 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -671,28 +671,19 @@ Result<void> Service::Start() {
     start_order_ = next_start_order_++;
     process_cgroup_empty_ = false;
 
-    if (CgroupsAvailable()) {
-        bool use_memcg = swappiness_ != -1 || soft_limit_in_bytes_ != -1 || limit_in_bytes_ != -1 ||
-                         limit_percent_ != -1 || !limit_property_.empty();
-        errno = -createProcessGroup(proc_attr_.uid, pid_, use_memcg);
-        if (errno != 0) {
-            if (char byte = 0; write((*pipefd)[1], &byte, 1) < 0) {
-                return ErrnoError() << "sending notification failed";
-            }
-            return Error() << "createProcessGroup(" << proc_attr_.uid << ", " << pid_
-                           << ") failed for service '" << name_ << "'";
+     bool use_memcg = swappiness_ != -1 || soft_limit_in_bytes_ != -1 || limit_in_bytes_ != -1 ||
+                      limit_percent_ != -1 || !limit_property_.empty();
+     errno = -createProcessGroup(proc_attr_.uid, pid_, use_memcg);
+     if (errno != 0) {
+        if (char byte = 0; write((*pipefd)[1], &byte, 1) < 0) {
+            return ErrnoError() << "sending notification failed";
         }
-
-        // When the blkio controller is mounted in the v1 hierarchy, NormalIoPriority is
-        // the default (/dev/blkio). When the blkio controller is mounted in the v2 hierarchy, the
-        // NormalIoPriority profile has to be applied explicitly.
-        SetProcessProfiles(proc_attr_.uid, pid_, {"NormalIoPriority"});
+        return Error() << "createProcessGroup(" << proc_attr_.uid << ", " << pid_
+                       << ") failed for service '" << name_ << "'";
+    }
 
         if (use_memcg) {
             ConfigureMemcg();
-        }
-    } else {
-        process_cgroup_empty_ = true;
     }
 
     if (oom_score_adjust_ != DEFAULT_OOM_SCORE_ADJUST) {
diff --git a/init/service_utils.cpp b/init/service_utils.cpp
index 52e66153c..78836b750 100644
--- a/init/service_utils.cpp
+++ b/init/service_utils.cpp
@@ -280,15 +280,6 @@ Result<void> SetProcessAttributes(const ProcessAttributes& attr) {
 }
 
 Result<void> WritePidToFiles(std::vector<std::string>* files) {
-    if (files->empty()) {
-        // No files to write pid to, exit early.
-        return {};
-    }
-
-    if (!CgroupsAvailable()) {
-        return Error() << "cgroups are not available";
-    }
-
     // See if there were "writepid" instructions to write to files under cpuset path.
     std::string cpuset_path;
     if (CgroupGetControllerPath("cpuset", &cpuset_path)) {
diff --git a/libprocessgroup/include/processgroup/processgroup.h b/libprocessgroup/include/processgroup/processgroup.h
index 9b2d77567..45a723f74 100644
--- a/libprocessgroup/include/processgroup/processgroup.h
+++ b/libprocessgroup/include/processgroup/processgroup.h
@@ -28,7 +28,6 @@ __BEGIN_DECLS
 
 static constexpr const char* CGROUPV2_CONTROLLER_NAME = "cgroup2";
 
-bool CgroupsAvailable();
 bool CgroupGetControllerPath(const std::string& cgroup_name, std::string* path);
 bool CgroupGetControllerFromPath(const std::string& path, std::string* cgroup_name);
 bool CgroupGetAttributePath(const std::string& attr_name, std::string* path);
diff --git a/libprocessgroup/processgroup.cpp b/libprocessgroup/processgroup.cpp
index 3fac373cb..bdda1020c 100644
--- a/libprocessgroup/processgroup.cpp
+++ b/libprocessgroup/processgroup.cpp
@@ -55,11 +55,6 @@ using namespace std::chrono_literals;
 
 #define PROCESSGROUP_CGROUP_PROCS_FILE "/cgroup.procs"
 
-bool CgroupsAvailable() {
-    static bool cgroups_available = access("/proc/cgroups", F_OK) == 0;
-    return cgroups_available;
-}
-
 bool CgroupGetControllerPath(const std::string& cgroup_name, std::string* path) {
     auto controller = CgroupMap::GetInstance().FindController(cgroup_name);
 
-- 
2.34.1

